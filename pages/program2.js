import Head from "next/head";
import React, { useContext, useState } from "react";
import { DragDropContext, Droppable } from "react-beautiful-dnd";
import InstrumentContainer from "../components/InstrumentContainer";
import InstrumentContainerDrag from "../components/InstrumentContainerDrag";
import MeasuresContainer2 from "../components/MeasuresContainer2";
import { InstrumentsContext } from "../hooks/InstrumentContext";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faPause, faPlay, faVolumeHigh, faVolumeMute } from "@fortawesome/free-solid-svg-icons";
// Yea
/**
 * Program 2 is the same thing as the first program file, except that this one deals
 * with drag and drop
 * @library react-beautiful-drag-n-drop
 * Above library is gonna be the one CARRYING this UI literally
 * Comes with pre-packaged drag and drop events. Hardest part is gonna be parsing
 * the instrument state in a way that the dnd state handler can read it
 * @returns
 */
export default function Program2() {
  const [togglePlayer, setTogglePlayer] = useState(true);
  const { start, stop, setInstruments, vol } = useContext(InstrumentsContext);
  const [volume, setVolume] = useState(1)
  const onDragHoverOver = ({}) => {
    // Function that reads if the current draggable is hovering over a measure, previews it when it enters, removes the preview once it leaves.
  };

  const handleToggle = () => {
    if (togglePlayer) {
      start();
    } else {
      stop();
    }
    setTogglePlayer(!togglePlayer);
  }

  const handleVolumeChange = (e) => {

    setVolume(e.target.value);
    vol.current.volume.value = e.target.value;
    console.log(vol.current.volume)
  }

  const onDragEnd = ({ source, destination, type, draggableId }) => {
    // Handle instruments getting "dropped out" of measure
    if (
      !destination &&
      (source.droppableId.includes("measure-0") ||
        source.droppableId.includes("measure-1"))
    ) {
      // Get all the info we need for determining instrument activation/preview
      const instrument_ident = draggableId.substring(0, draggableId.length - 4);
      const instrument_number = draggableId.substring(
        draggableId.length - 3,
        draggableId.length - 2
      );
      console.log(instrument_ident);
      console.log(instrument_number);
      setInstruments({
        type: "toggle",
        instrument: instrument_ident,
        instrumentId: instrument_number,
        measureIndex:source.droppableId.includes("measure-1") ? 1 : 0,
      });
      return;
    } else if (!destination) {
      return;
    }
    if (
      (source.droppableId.includes("measure-0") && !destination.droppableId.includes('measure-0'))||
      (source.droppableId.includes("measure-1") && !destination.droppableId.includes('measure-1'))
    ) {
      const instrument_ident = draggableId.substring(0, draggableId.length - 4);
      const instrument_number = draggableId.substring(
        draggableId.length - 3,
        draggableId.length - 2
      );
      setInstruments({
        type: "toggle",
        instrument: instrument_ident,
        instrumentId: instrument_number,
        measureIndex: destination.droppableId.includes("measure-1") ? 0 : 1,
      })
      setInstruments({
        type: "toggle",
        instrument: instrument_ident,
        instrumentId: instrument_number,
        measureIndex: destination.droppableId.includes("measure-1") ? 1 : 0,
      });
      return;
    }

    // Get all the info we need for determining instrument activation/preview
    const instrument_ident = draggableId.substring(0, draggableId.length - 2);
    const instrument_number = draggableId.substring(
      draggableId.length - 1,
      draggableId.length
    );

    if (
      destination.droppableId.includes("measure-0") &&
      !source.droppableId.includes("measure-0")
    ) {
      setInstruments({
        type: "toggle",
        instrument: instrument_ident,
        instrumentId: instrument_number,
        measureIndex: 0,
      });
    } else if (
      destination.droppableId.includes("measure-1") &&
      !source.droppableId.includes("measure-1")
    ) {
      setInstruments({
        type: "toggle",
        instrument: instrument_ident,
        instrumentId: instrument_number,
        measureIndex: 1,
      });
    }
  };
  return (
    <>
      <Head>
        <title>Alternate Design - Drag and Drop</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <DragDropContext onDragEnd={onDragEnd}>
          <div className="main_app_container">
            <MeasuresContainer2 />
            <div className="instruments">
              <div className="instrument-types-label">
              <div className="controls-container">
                <button
                style={{
                  height: '30px',
                  width: '30px',
                  display: 'flex',
                  justifyContent: 'center',
                  alignItems: 'center',
                  borderRadius: '100%'
                }}
                className="play-button"
                  onClick={handleToggle}>
                  {togglePlayer ? <FontAwesomeIcon height={30} icon={faPlay}/> : <FontAwesomeIcon height={30}icon={faPause}/>}
                </button>
                <div className="volume-container">
                  <FontAwesomeIcon height={20} icon={faVolumeMute} /> <input max={4} min={-80} onChange={handleVolumeChange} value={volume} type="range" id="volume-slider"></input> <FontAwesomeIcon height={20} icon={faVolumeHigh}/>
                </div>
              </div>
              <div>Instrument Types</div>
              </div>
              <div className="instruments-container">
                <InstrumentContainerDrag
                  name="kick"
                  color="#1b49bf"
                  instrument_ident="kick"
                />
                <InstrumentContainerDrag
                  name="snare"
                  color="#1b49bf"
                  instrument_ident="snare"
                />
                <InstrumentContainerDrag
                  name="cymbal"
                  color="#1b49bf"
                  instrument_ident="cymbal"
                />
                <InstrumentContainerDrag
                  name="bass"
                  color="#1f870c"
                  instrument_ident="bass"
                />
                <InstrumentContainerDrag
                  name="melody"
                  color="#c21b1b"
                  instrument_ident="melody"
                />
                <InstrumentContainerDrag
                  name="auxiliary"
                  color="#9d03fc"
                  instrument_ident="auxiliary"
                />
              </div>
            </div>
          </div>
        </DragDropContext>
      </main>
    </>
  );
}
// Oh my gooood
